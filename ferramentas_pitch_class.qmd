---
title: Ferramentas *Pitch class*
format: lcars-html
toc: false
---

```{python}

#| echo: false

import dash
from dash import dcc
from dash import html
from dash.dependencies import Input, Output, State

#### CRIA DASHBOARD ####
app = dash.Dash(__name__)

# app.layout = html.Div([
    # dcc.Input(id='input-text', type='text', placeholder='Conjunto'),
    # html.Button('Calcular', id='confirm-button', n_clicks=0),
    # html.Div(id='output-text')
# ])

app.layout = html.Div([
    html.H1("Selecione o conjunto de interesse", style={"color": "white"}),
    dcc.Checklist(
        id='valores-checkbox',
        options=[
            {'label': '0', 'value': 0},
            {'label': '1', 'value': 1},
            {'label': '2', 'value': 2},
            {'label': '3', 'value': 3},
            {'label': '4', 'value': 4},
            {'label': '5', 'value': 5},
            {'label': '6', 'value': 6},
            {'label': '7', 'value': 7},
            {'label': '8', 'value': 8},
            {'label': '9', 'value': 9},
            {'label': '10', 'value': 10},
            {'label': '11', 'value': 11}
        ],
        style={"color": "white"},
        value=[]  # Valor inicial vazio
    ),
    html.Button('Calcular', id='confirm-button', n_clicks=0),
    html.Div(id='resultado')  # Elemento de saída para exibir os valores selecionados
])

@app.callback(
    Output('resultado', 'children'),
    [Input('confirm-button', 'n_clicks')],
    [State('valores-checkbox', 'value')],
    prevent_initial_call = True
)

def update_output(n_clicks, value):
    from music21 import chord
    from itertools import combinations
    import numpy as np
    from dash import html

    #### DEFINE FUNÇÕES ####

    #Calcula a paleta de uma classe de conjuntos
    def paleta(classe):

        paletaT = [normal([(y+x)%12 for y in classe]) for x in range(12)]
        paletaI = [normal([(12-y+x)%12 for y in classe]) for x in range(12)]
        
        paleta = set(map(tuple, paletaT + paletaI))
        
        return paleta

    #Calcula forma prima
    def prima(conjunto):

        prime = chord.Chord(conjunto).primeForm
        
        return prime

    #Calcula forma normal
    def normal(conjunto):
        
        normal = chord.Chord(conjunto).normalOrder
        
        return normal

    #Calcula o vetor de classes de intervalares
    def vetor(conjunto):
        
        vetor = [0,0,0,0,0,0]
        
        sub = set(combinations(conjunto, 2))
        sub = list(sub)
        sub = [list(x) for x in sub]
        
        # print(sub)
        
        for x in range(len(sub)):
            
            valor = (sub[x][1]-sub[x][0])%12
            # print(valor)
            if valor==1 or valor==11: vetor[0]=vetor[0]+1
            if valor==2 or valor==10: vetor[1]=vetor[1]+1
            if valor==3 or valor==9: vetor[2]=vetor[2]+1
            if valor==4 or valor==8: vetor[3]=vetor[3]+1 
            if valor==5 or valor==7: vetor[4]=vetor[4]+1 
            if valor==6 : vetor[5]=vetor[5]+1
            
        return vetor        

    #Transposição Tn e dá o resultado na forma normal"
    def T(conjunto, fator):
        
        trans = [(x + fator)%12 for x in conjunto]
        return normal(trans)

    #Inversão TnI em torno de 0 e dá o resultado na forma normal
    def I(conjunto, fator):

        inv = [((12-x) + fator)%12 for x in conjunto]
        return normal(inv)

    #Transforma a entrada em lista de inteiros
    def str_int(lst):
        return [int(x) for x in lst.split()]

    #Matrizes de diferença e soma
    def matrizes(conjunto):
        matriz_trans = np.zeros((len(conjunto),len(conjunto)))
        matriz_inv = np.zeros((len(conjunto),len(conjunto)))

        for x in range(len(conjunto)):
            for y in range(len(conjunto)):
                valor = (conjunto[x]-conjunto[y])%12
                matriz_trans[y,x]= valor
                
                
        for x in range(len(conjunto)):
            for y in range(len(conjunto)):
                valor = (conjunto[x]+conjunto[y])%12
                matriz_inv[y,x]= valor
        
        return matriz_trans, matriz_inv

    if n_clicks > 0:
        try:
            # conjunto = [int(x) for x in value.split()]
            conjunto = value

            paleta_conjunto = paleta(conjunto)

            prima_conjunto = prima(conjunto)

            normal_conjunto = normal(conjunto)

            vetor_conjunto = vetor(conjunto)

            matriz_trans_conjunto, matriz_inv_conjunto = matrizes(conjunto)

            elementos_saida = [
                html.P(f"Paleta: {paleta_conjunto}", style={"color": "white"}),
                html.P(f"Forma normal: {normal_conjunto}", style={"color": "white"}),
                html.P(f"Forma prima: {prima_conjunto}", style={"color": "white"}),
                html.P(f"Forma prima: {prima_conjunto}", style={"color": "white"}),
                html.P(f"Vetor intervalar: {vetor_conjunto}", style={"color": "white"}),
                html.P(f"Matriz de diferenças: {matriz_trans_conjunto}", style={"color": "white"}),
                html.P(f"Matriz de adições: {matriz_inv_conjunto}", style={"color": "white"})
                ]

            return elementos_saida

        except ValueError:
            return "Por favor, insira um conjunto válido."

if __name__ == '__main__':
    app.run_server(debug=True)
```